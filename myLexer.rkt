#lang racket


(require parser-tools/lex
         (prefix-in : parser-tools/lex-sre)
         parser-tools/yacc)

(define simple-math-lexer
  (lexer
   ((:or (:+ (char-range #\0 #\9))
         (:: (:+ (char-range #\0 #\9)) #\. (:+ (char-range #\0 #\9))))
    (token-NUM (string->number lexeme)))
   (";" (token-semicolon))
   ("pass" (token-semicolon))
   ("break" (token-semicolon))
   ("continue" (token-semicolon))
   ("=" (token-semicolon))
   ("return" (token-semicolon))
   ("global" (token-semicolon))
   ("def" (token-semicolon))
   ("(" (token-semicolon))
   (")" (token-semicolon))
   (":" (token-semicolon))
   ("," (token-))
   ("if" (token-))
   ("else" (token-))
   ("for" (token-))
   ("in" (token-))
   ("or" (token-))
   ("and" (token-))
   ("not" (token-))
   ("==" (token-))
   ("<" (token-))
   (">" (token-))
   ("+" (token-plus))
   ("-" (token-minus))
   ("*" (token-mul))
   ("/" (token-div))
   ("**" (token-))
   ("[" (token-))
   ("]" (token-))
   ("True" (token-))
   ("False" (token-))
   ("None" (token-))
   (whitespace (simple-math-lexer input-port))
   ((eof) (token-EOF))))

(define-tokens a (NUM))
(define-empty-tokens b (EOF plus minus semicolon))


;test
(define lex-this (lambda (lexer input) (lambda () (lexer input))))
(define my-lexer (lex-this simple-math-lexer (open-input-string "1+2.577+ 3 +-   4")))
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
(my-lexer)
